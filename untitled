init: function() {
      var sg = this;
      sg.setupElements();
      sg.setGrid();
      sg.setupDrag();
    },

    setupElements: function() {
      var sg = this,
          containerHeight = sg.container.height(),
          containerWidth = sg.container.width();

      // Create an SVG element for our content
      sg.svg.appendTo(this.container)
          .css({
            height: containerHeight,
            left: -(containerWidth),
            position: "absolute",
            width: containerWidth * 3
          });

      // Create a canvas element that will generate the grid
      sg.grid.appendTo(this.container).hide();
    },

    setGrid: function() {
      var sg = this,
          options = this.options,
          canvas = sg.grid[0],
          ctx = canvas.getContext("2d"),
          scaleX = options.grid.x,
          scaleY = options.grid.y;

      canvas.height = scaleY;
      canvas.width = scaleX;

      // Draw the grid image
      ctx.moveTo(scaleX - 0.5, -0.5);
      ctx.lineTo(scaleX - 0.5, scaleY - 0.5);
      ctx.lineTo(-0.5,scaleY - 0.5);
      ctx.strokeStyle = options.grid.color;
      ctx.stroke();

      // Create a repeated image from canvas
      data = canvas.toDataURL("image/jpg");
      sg.container.css({ background: "url("+data+")" });
    },

    setupDrag: function() {
      var sg = this,
          options = sg.options,
          client = {x: 0, y: 0},
          svg = {x: 0, y: 0},
          dragging = false;

      sg.container.on("mousedown mousemove mouseup", function(e) {
        if(e.type === "mousedown") {
          dragging = true;
          client.x = e.pageX;
          client.y = e.pageY;
          svg.x = sg.svg.position().left();
        } else if(e.type === "mousemove" && dragging) {
          sg.container.css({
            marginLeft: -(svg.x - (e.pageX - client.x))
          })
        } else if(e.type === "mouseup") {
          dragging = false;
        }
      })
    }